import Sidebar from 'src/partials/Sidebar';
import Navbar from 'src/partials/Navbar';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import { Button } from 'src/Components/Button';
import InputField from 'src/Components/InputField';
import Container from 'src/partials/Container';
import {
	PencilIcon,
	XCircleIcon,
	ArrowPathIcon,
	UserCircleIcon,
} from '@heroicons/react/24/outline';
import { useUser } from 'src/context/UserContext';
import { ERROR, INFO, useAlert } from 'src/Components/Alert';
import ChangePassword from 'src/Components/ChangePassword';

export default function Profile() {
	const profile = useUser();
	const { showAlert } = useAlert();

	const [isEditMode, setIsEditMode] = useState(false);
	const [showChangePassword, setShowChangePassword] = useState(false);

	const [fullName, setFullName] = useState({
		firstName: 'eafef',
		middleName: '',
		lastName: '',
	});
	const [gender, setGender] = useState('');
	const [dateOfBirth, setDateOfBirth] = useState<string>('');

	useEffect(() => {
		setFullName({ ...profile.fullName });
		setGender(profile.gender);
		// Date workaround as HTML input field requires date in YYYY-MM-DD format
		setDateOfBirth(
			profile.dateOfBirth
				? profile.dateOfBirth.toISOString().split('T')[0]
				: '',
		);
	}, [profile]);

	function onProfileUpdate() {
		const newProfile: { [k: string]: any } = {
			firstName: fullName.firstName,
			middleName: fullName.middleName,
			lastName: fullName.lastName,
		};
		if (gender) {
			newProfile.gender = gender;
		}
		if (dateOfBirth) {
			newProfile.dateOfBirth = new Date(dateOfBirth);
		}
		profile.updateUserProfile(
			newProfile,
			() => {
				showAlert(INFO, 'Profiled updated successfully', true);
				setIsEditMode(false);
			},
			() => {
				showAlert(
					ERROR,
					'Oops something went wrong !! Please try again',
					true,
				);
			},
		);
	}

	function onProfileUpdateCancel() {
		setIsEditMode(false);
	}

	return (
		<>
			<Head>
				<title>Profile</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
				<link rel="icon" href="/courses.svg" />
			</Head>
			<Navbar />
			<Sidebar />
			<Container>
				<div className="h-full grid-flow-col mb-2">
					<div className="flex flex-col items-center justify-center mt-4">
						<div className="flex flex-col items-center justify-center">
							<UserCircleIcon
								className="w-32 h-32 rounded-full"
								strokeWidth={1}
							/>
							<div className="mt-3 font-medium">
								<h1 className="text-2xl font-bold text-center">
									{profile.fullName.firstName}{' '}
									{profile.fullName.lastName}
								</h1>
							</div>
						</div>
					</div>
					<form className="flex flex-col justify-center px-4 my-3 overflow-hidden">
						<div className="mt-6 mb-4 mx-5 flex flex-col sm:flex-row justify-between items-start space-y-2 sm:items-center">
							<div className="text-xl md:text-2xl font-semibold">
								Personal details
							</div>
							{!isEditMode ? (
								<Button
									label="Edit"
									leadingIcon={
										<PencilIcon className="w-5 h-5" />
									}
									onClick={() => {
										setIsEditMode(true);
									}}
								/>
							) : null}
						</div>
						<hr className="border-1 border-slate-500 mx-5" />
						<div className="overflow-hidden shadow sm:rounded-lg">
							<div className="px-4 py-5 sm:p-6">
								<div className="grid grid-cols-6 gap-6">
									<InputField
										name="firstname"
										className="col-span-6 lg:col-span-2"
										label="First Name"
										type="text"
										value={fullName.firstName}
										readOnly={!isEditMode}
										onChange={(e) => {
											if (isEditMode) {
												setFullName({
													...fullName,
													firstName: e.target.value,
												});
											}
										}}
									/>
									<InputField
										name="middlename"
										className="col-span-6 lg:col-span-2"
										label="Middle Name"
										type="text"
										value={fullName.middleName}
										readOnly={!isEditMode}
										onChange={(e) => {
											if (isEditMode) {
												setFullName({
													...fullName,
													middleName: e.target.value,
												});
											}
										}}
									/>
									<InputField
										name="lastname"
										className="col-span-6 lg:col-span-2"
										label="Last Name"
										type="text"
										value={fullName.lastName}
										readOnly={!isEditMode}
										onChange={(e) => {
											if (isEditMode) {
												setFullName({
													...fullName,
													lastName: e.target.value,
												});
											}
										}}
									/>
									<div className="flex flex-row items-end space-x-5 col-span-6 sm:col-span-2">
										<div className="flex flex-col w-full">
											<label
												htmlFor="gender"
												className="block text-base font-medium text-primary-800 dark:text-primary-500 "
											>
												Gender
											</label>
											<select
												className="input-field py-2.5"
												name="gender"
												value={gender}
												onChange={(e) => {
													if (isEditMode) {
														setGender(
															e.target.value,
														);
													}
												}}
											>
												<option value="NONE">
													None
												</option>
												<option value="MALE">
													Male
												</option>
												<option value="FEMALE">
													Female
												</option>
												<option value="OTHER">
													Other
												</option>
											</select>
										</div>
									</div>
									<InputField
										name="dateofBirth"
										className="col-span-6 sm:col-span-3"
										label="Date of Birth"
										type="date"
										value={dateOfBirth}
										readOnly={!isEditMode}
										onChange={(e) => {
											if (isEditMode) {
												setDateOfBirth(e.target.value);
											}
										}}
									/>
									<div className="col-span-6 flex flex-row space-x-4 mt-6">
										{isEditMode ? (
											<>
												<Button
													label="Update"
													leadingIcon={
														<ArrowPathIcon className="w-5 h-5" />
													}
													onClick={() =>
														onProfileUpdate()
													}
												/>
												<Button
													label="Cancel"
													leadingIcon={
														<XCircleIcon className="w-5 h-5" />
													}
													onClick={() =>
														onProfileUpdateCancel()
													}
												/>
											</>
										) : null}
									</div>
								</div>
							</div>
						</div>
					</form>
					<form className="flex flex-col justify-center px-4 overflow-hidden">
						<div className="mt-6 mb-4 mx-5 flex flex-col sm:flex-row justify-between items-start space-y-2 sm:items-center">
							<div className="text-xl md:text-2xl font-semibold">
								Account details
							</div>
						</div>
						<hr className="border-1 border-slate-500 mx-5" />
						<div className="overflow-hidden shadow grid grid-cols-6 gap-6 sm:rounded-lg px-4 py-5 sm:p-6">
							<InputField
								className="col-span-6 sm:col-span-2"
								name="password"
								type="password"
								readOnly
								label="Password"
								value="ADummyPassword"
								disabled
							/>
							<div className="col-span-6 sm:col-span-2 flex items-end">
								<Button
									label="Change password"
									leadingIcon={
										<PencilIcon className="w-5 h-5" />
									}
									onClick={() => setShowChangePassword(true)}
								/>
							</div>
						</div>
					</form>
				</div>
				{showChangePassword ? (
					<ChangePassword
						closePrompt={() => setShowChangePassword(false)}
					/>
				) : null}
			</Container>
		</>
	);
}
