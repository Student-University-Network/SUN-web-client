/* eslint-disable react/no-array-index-key */
import Sidebar from 'src/partials/Sidebar';
import Navbar from 'src/partials/Navbar';
import Head from 'next/head';
import Container from 'src/partials/Container';
import InputField from 'src/Components/InputField';
import { useState, useEffect } from 'react';
import { Button, IconButton } from 'src/Components/Button';
import { useRouter } from 'next/router';
import {
	PlusCircleIcon,
	MinusCircleIcon,
	PencilIcon,
	TrashIcon,
	PlusIcon,
} from '@heroicons/react/24/outline';
import ExpandableContainer from 'src/Components/ExpandableContainer';
import {
	THead,
	THeaderRowCell,
	THeadCell,
	TBody,
	TRow,
	TDataCell,
} from 'src/Components/TableComponents';
import CourseModal from 'src/Components/CourseModal';
import { ERROR, INFO, useAlert, WARNING } from 'src/Components/Alert';
import { useProgram } from 'src/context/ProgramContext';
import { useUser } from 'src/context/UserContext';
import { useAuth } from 'src/context/AuthContext';

interface Course {
	index: number;
	courseName: string;
	totalLectures: number;
	compulsory: boolean;
}

interface Semester {
	semesterName: string;
	order: number;
}

interface Batch {
	batchName: string;
}

export default function NewProgram() {
	const router = useRouter();
	const { showAlert } = useAlert();
	const { createProgram } = useProgram();
	const { userId } = useUser();
	const { user } = useAuth();

	const [programName, setProgramName] = useState('');
	const [startYear, setStartYear] = useState('');
	const [endYear, setEndYear] = useState('');
	const [duration, setDuration] = useState(1);
	const [tag, setTag] = useState('');
	const [currentSemIndex, setCurrentSemIndex] = useState(0);
	const [semesters, setSemesters] = useState<Array<Semester>>([
		{
			semesterName: '',
			order: 0,
		},
	]);
	const [courses, setCourses] = useState<Array<Array<Course>>>([[]]);
	const [showCourseModal, setShowCourseModal] = useState(false);
	const [currentCourseData, setCurrentCourseData] = useState({
		index: 0,
		courseName: '',
		totalLectures: 0,
		compulsory: true,
	});
	const [batches, setBatches] = useState<Array<Batch>>([]);

	const addNewSemester = () => {
		const newSemesters = [...semesters];
		newSemesters.push({
			semesterName: '',
			order: newSemesters.length,
		});
		setSemesters(newSemesters);
		setCourses([...courses, []]);
	};

	const removeNewSemester = (index: number) => {
		setSemesters(semesters.filter((_, _index) => _index !== index));
		setCourses(courses.filter((_, _index) => _index !== index));
	};

	const onSubmit = () => {
		if (programName === '' || duration === 0 || tag === '') {
			showAlert(WARNING, 'Please enter all required', true);
			return;
		}
		if (startYear === '') {
			showAlert(WARNING, 'Please enter start year', true);
			return;
		}
		if (endYear === '') {
			showAlert(WARNING, 'Please enter end year', true);
			return;
		}
		if (batches.length === 0) {
			showAlert(WARNING, 'Please add atleast one batch', true);
			return;
		}
		if (duration !== semesters.length) {
			showAlert(
				WARNING,
				`For program of duration ${duration}, ${semesters.length} semester/s are provided`,
				true,
			);
			return;
		}

		const newProgram = {
			programName,
			duration,
			startYear: new Date(startYear).toISOString(),
			endYear: new Date(endYear).toISOString(),
			tag,
			batches,
			currentSemester: 0,
			semesters: semesters.map((sem, i) => ({
				semesterName: sem.semesterName,
				order: sem.order,
				courses: courses[i].map((crs) => ({
					courseName: crs.courseName,
					totalLectures: crs.totalLectures,
					compulsory: crs.compulsory,
				})),
			})),
		};

		createProgram(
			newProgram,
			() => {
				showAlert(INFO, 'New program successfully created', true);
				router.push('/programs');
			},
			() =>
				showAlert(
					ERROR,
					'Oops something went wrong !! Please try again',
					true,
				),
		);
	};

	useEffect(() => {
		if (
			userId !== '' &&
			['STUDENT', 'FACULTY', 'STAFF'].includes(user?.role || '')
		) {
			router.replace('/dashboard');
		}
	}, [userId]);

	return (
		<>
			<Head>
				<title>New Program</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
				<link rel="icon" href="/courses.svg" />
			</Head>
			<Navbar />
			<Sidebar />

			{showCourseModal ? (
				<CourseModal
					closePrompt={() => setShowCourseModal(false)}
					saveCourse={(crsData: Course) => {
						const newCourses = courses;
						if (
							crsData.index < newCourses[currentSemIndex].length
						) {
							newCourses[currentSemIndex][crsData.index] =
								crsData;
						} else {
							newCourses[currentSemIndex].push(crsData);
						}
						setCourses([...newCourses]);
					}}
					courseData={currentCourseData}
				/>
			) : null}

			<Container>
				<section className="ml-3 h-full">
					<form className="flex flex-col justify-center px-3 overflow-hidden">
						<span className="inline-flex items-center text-2xl font-medium text-primary-800 dark:text-primary-500">
							<PlusCircleIcon className="m-8 h-8 mr-2" />
							Add New Program
						</span>
						<div className="px-4 py-5 sm:p-6 grid grid-cols-6 gap-6">
							<InputField
								name="programName"
								className="col-span-6 lg:col-span-6"
								label="Program Name"
								type="text"
								value={programName}
								onChange={(e) => setProgramName(e.target.value)}
							/>
							<InputField
								name="startYear"
								className="col-span-6 lg:col-span-2"
								label="Start Year"
								type="date"
								value={startYear}
								onChange={(e) => setStartYear(e.target.value)}
							/>
							<InputField
								name="endYear"
								className="col-span-6 lg:col-span-2"
								label="End year"
								type="date"
								value={endYear}
								onChange={(e) => setEndYear(e.target.value)}
							/>
							<InputField
								name="tag"
								className="col-span-6 lg:col-span-2"
								label="Tag"
								type="text"
								value={tag}
								onChange={(e) => setTag(e.target.value)}
							/>
							<InputField
								name="duration"
								className="col-span-6 lg:col-span-2"
								label="Duration"
								type="number"
								min={1}
								value={duration}
								onChange={(e) =>
									setDuration(parseInt(e.target.value, 10))
								}
							/>
						</div>

						<div className="px-4 py-5 sm:p-6">
							<div className="mb-6 font-medium text-primary-800 dark:text-primary-500">
								Batches
							</div>
							<table className="w-full col-span-6">
								<THead>
									<THeaderRowCell>
										<THeadCell width="20%">
											Sr no.
										</THeadCell>
										<THeadCell width="60%">
											Batch Name
										</THeadCell>
										<THeadCell width="20%" />
									</THeaderRowCell>
								</THead>
								<TBody>
									{batches.length === 0 ? (
										<TRow>
											<TDataCell
												colSpan={4}
												className="text-center"
											>
												No batches added
											</TDataCell>
										</TRow>
									) : null}
									{batches.map((batch, batchIndex) => (
										<TRow
											key={`course_${batchIndex}`}
											className="text-gray-700 bg-gray-50 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-900 dark:text-gray-400"
										>
											<TDataCell className="font-semibold">
												{batchIndex + 1}
											</TDataCell>
											<TDataCell>
												<textarea
													className="bg-transparent resize-x max-h-4 focus:border-none focus:outline-none w-full border-none"
													cols={1}
													value={batch.batchName}
													onChange={(e) => {
														const newBatches = [
															...batches,
														];
														newBatches[
															batchIndex
														].batchName =
															e.target.value;
														setBatches(newBatches);
													}}
													onBlur={(e) => {
														const newBatches = [
															...batches,
														];
														newBatches[
															batchIndex
														].batchName =
															e.target.value;
														if (
															e.target.value ===
															''
														) {
															newBatches[
																batchIndex
															].batchName = `Batch ${batchIndex}`;
														}
														setBatches(newBatches);
													}}
												/>
											</TDataCell>
											<TDataCell className="flex justify-center">
												<IconButton
													className="btn-outline"
													leadingIcon={
														<TrashIcon
															className="w-4 h-4"
															strokeWidth={2}
														/>
													}
													onClick={() => {
														setBatches(
															batches.filter(
																(_, _index) =>
																	_index !==
																	batchIndex,
															),
														);
													}}
												/>
											</TDataCell>
										</TRow>
									))}
									<TRow>
										<TDataCell className="p-0" colSpan={3}>
											<Button
												className="btn-text w-full justify-center shadow-none border-none bg-transparent"
												leadingIcon={
													<PlusIcon
														className="w-4 h-4"
														strokeWidth={2}
													/>
												}
												label="New Batch"
												onClick={() =>
													setBatches([
														...batches,
														{
															batchName: `Batch ${batches.length}`,
														},
													])
												}
											/>
										</TDataCell>
									</TRow>
								</TBody>
							</table>
						</div>

						<div className="px-4 py-5 sm:p-6">
							<div className="mb-6 font-medium text-primary-800 dark:text-primary-500">
								Semesters
							</div>
							{semesters.map((semester, semIndex) => (
								<>
									<ExpandableContainer
										title={`Semester ${semIndex + 1}`}
										key={`semester_${semIndex}`}
										content={
											<div className="grid grid-cols-6 gap-6">
												<InputField
													name="semesterName"
													className="col-span-6 lg:col-span-3"
													label="Semester Name"
													type="text"
													value={
														semester.semesterName
													}
													onChange={(e) => {
														semesters[
															semIndex
														].semesterName =
															e.target.value;
														setSemesters([
															...semesters,
														]);
													}}
												/>
												<InputField
													name="order"
													className="col-span-6 lg:col-span-3"
													label="Order"
													type="number"
													readOnly
													value={semIndex}
												/>
												<table className="w-full col-span-6">
													<THead>
														<THeaderRowCell>
															<THeadCell width="40%">
																Course Name
															</THeadCell>
															<THeadCell width="20%">
																Total lectures
															</THeadCell>
															<THeadCell width="20%">
																Compulsory
															</THeadCell>
															<THeadCell width="20%">
																Action
															</THeadCell>
														</THeaderRowCell>
													</THead>
													<TBody>
														{courses[semIndex]
															.length === 0 ? (
															<TRow>
																<TDataCell
																	colSpan={4}
																>
																	No courses
																	added
																</TDataCell>
															</TRow>
														) : null}
														{courses[semIndex].map(
															(
																course,
																crsIndex,
															) => (
																<TRow
																	key={`course_${crsIndex}`}
																	className="text-gray-700 bg-gray-50 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-900 dark:text-gray-400"
																>
																	<TDataCell className="font-semibold">
																		{
																			course.courseName
																		}
																	</TDataCell>
																	<TDataCell>
																		{
																			course.totalLectures
																		}{' '}
																		Lectures
																	</TDataCell>
																	<TDataCell>
																		{course.compulsory
																			? 'Compulsory'
																			: 'Optional'}
																	</TDataCell>
																	<TDataCell>
																		<IconButton
																			className="btn-outline"
																			leadingIcon={
																				<PencilIcon
																					className="w-4 h-4"
																					strokeWidth={
																						2
																					}
																				/>
																			}
																			onClick={() => {
																				setCurrentCourseData(
																					course,
																				);
																				setCurrentSemIndex(
																					semIndex,
																				);
																				setShowCourseModal(
																					true,
																				);
																			}}
																		/>
																		<IconButton
																			className="btn-outline"
																			leadingIcon={
																				<TrashIcon
																					className="w-4 h-4"
																					strokeWidth={
																						2
																					}
																				/>
																			}
																			onClick={() => {
																				const newCourses =
																					courses;
																				newCourses[
																					semIndex
																				] =
																					newCourses[
																						semIndex
																					].filter(
																						(
																							_,
																							_index,
																						) =>
																							_index !==
																							crsIndex,
																					);
																				setCourses(
																					[
																						...newCourses,
																					],
																				);
																			}}
																		/>
																	</TDataCell>
																</TRow>
															),
														)}
														<TRow>
															<TDataCell
																className="p-0"
																colSpan={4}
															>
																<Button
																	className="btn-text w-full justify-center shadow-none border-none bg-transparent"
																	leadingIcon={
																		<PlusIcon
																			className="w-4 h-4"
																			strokeWidth={
																				2
																			}
																		/>
																	}
																	label="New Course"
																	onClick={() => {
																		setCurrentCourseData(
																			{
																				index: courses[
																					semIndex
																				]
																					.length,
																				courseName:
																					'',
																				totalLectures: 1,
																				compulsory:
																					true,
																			},
																		);
																		setCurrentSemIndex(
																			semIndex,
																		);
																		setShowCourseModal(
																			true,
																		);
																	}}
																/>
															</TDataCell>
														</TRow>
													</TBody>
												</table>
												<hr className="col-span-6" />
												<div className="flex flex-row space-x-2 col-span-4">
													<Button
														className="btn-outline"
														onClick={() =>
															addNewSemester()
														}
														leadingIcon={
															<PlusCircleIcon
																className="w-5 h-5"
																strokeWidth={2}
															/>
														}
														label="Add Semester"
													/>
													{semesters.length > 1 ? (
														<Button
															className="btn-outline"
															onClick={() =>
																removeNewSemester(
																	semIndex,
																)
															}
															leadingIcon={
																<MinusCircleIcon
																	className="w-5 h-5"
																	strokeWidth={
																		2
																	}
																/>
															}
															label="Remove Semester"
														/>
													) : null}
												</div>
											</div>
										}
									/>
									<div className="my-6" />
								</>
							))}
						</div>
						<div className="px-4 ml-3 col-span-6 flex flex-row space-x-4 mt-6">
							<Button label="Create" onClick={() => onSubmit()} />
							<Button
								label="Cancel"
								onClick={() => {
									router.push('/programs');
								}}
							/>
						</div>
					</form>
				</section>
			</Container>
		</>
	);
}
