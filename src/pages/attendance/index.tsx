import { CalendarDaysIcon } from '@heroicons/react/24/outline';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import { EmptyFunction } from 'src/Components/Utils';
import { useAuth } from 'src/context/AuthContext';
import { useFaculty } from 'src/context/FacultyContext';
import Container from 'src/partials/Container';
import Navbar from 'src/partials/Navbar';
import Sidebar from 'src/partials/Sidebar';
import { FacultyAttendanceReport } from 'src/api/facultyService';
import { ERROR, useAlert } from 'src/Components/Alert';
import { Button } from 'src/Components/Button';
import { useUser } from 'src/context/UserContext';
import { StudentAttendanceReport } from 'src/api/userService';
import { CourseCard } from '../courses';

function FacultyView() {
	const { getCoursesList, coursesList } = useFaculty();
	const { getFacultyAttendanceReport } = useFaculty();
	const { showAlert } = useAlert();
	const [courseReport, setCourseReport] = useState<FacultyAttendanceReport>({
		courseId: '',
		courseName: '',
		professorId: '',
		professorName: '',
		totalLectures: 0,
		attendance: [],
	});
	const [viewCourseReport, setViewCourseReport] = useState({
		show: false,
		courseId: '',
		batchId: '',
	});

	useEffect(() => {
		getCoursesList(EmptyFunction, EmptyFunction);
	}, []);

	useEffect(() => {
		if (viewCourseReport.show) {
			getFacultyAttendanceReport(
				viewCourseReport.courseId,
				viewCourseReport.batchId,
				(data: FacultyAttendanceReport) => setCourseReport(data),
				() =>
					showAlert(
						ERROR,
						'Failed to get attendance report for the course',
						true,
					),
			);
		}
	}, [viewCourseReport]);

	if (viewCourseReport.show) {
		return (
			<div className="overflow-y-hidden h-full">
				<div className="flex w-full justify-end py-4">
					<Button
						onClick={() =>
							setViewCourseReport({
								show: false,
								courseId: '',
								batchId: '',
							})
						}
						label="Back"
					/>
				</div>
				<div className="text-2xl my-3 font-bold">
					{courseReport.courseName}
				</div>
				<div>Total lectures: {courseReport.totalLectures}</div>
				<hr className="my-4" />
				<div className="my-2 text-xl font-medium text-primary-800 dark:text-primary-500">
					Students:
				</div>
				<div className="flex flex-col space-y-1 py-2 overflow-y-auto">
					{courseReport.attendance.map((usr) => (
						<div className="shadow w-full mx- p-4 rounded flex flex-col justify-start">
							<div className="font-semibold">
								{usr.firstName} {usr.lastName}
							</div>
							<div className="flex justify-between w-full">
								<div>Total attended: {usr.attended}</div>
								<div>
									Total attendance:{' '}
									{Number(
										(usr.attended /
											(courseReport.totalLectures *
												1.0)) *
											100,
									).toPrecision(3)}
									%
								</div>
							</div>
						</div>
					))}
				</div>
			</div>
		);
	}
	return (
		<div className="flex flex-col w-full items-center space-y-2">
			{coursesList.map((crs) => (
				<CourseCard
					data={{ ...crs }}
					onCardClick={(courseId: string, batchId: string) =>
						setViewCourseReport({
							show: true,
							courseId,
							batchId,
						})
					}
				/>
			))}
		</div>
	);
}

function StudentView() {
	const [studentReport, setStudentReport] = useState<StudentAttendanceReport>(
		{
			courses: [],
		},
	);
	const { showAlert } = useAlert();
	const { getStudentAttendanceReport } = useUser();

	useEffect(() => {
		getStudentAttendanceReport(
			(data: StudentAttendanceReport) => setStudentReport(data),
			() => showAlert(ERROR, 'Failed to fetch attendance report', true),
		);
	});
	return (
		<div className="flex flex-col space-y-2">
			{studentReport.courses.map((r) => (
				<div className="shadow w-full mx- p-4 rounded flex flex-col justify-start">
					<div className="text-2xl my-3 font-bold">
						{r.courseName}
					</div>
					<div className="flex space-x-2 w-full">
						<div>Lectures: {r.totalLectures}</div>
						<div />|<div>Attended: {r.attended}</div>
					</div>
					<div>
						Total attendance:{' '}
						{Number(
							(r.attended / (r.totalLectures * 1.0)) * 100,
						).toPrecision(3)}
						%
					</div>
				</div>
			))}
		</div>
	);
}

export default function ViewAttendance() {
	const { user } = useAuth();

	return (
		<>
			<Head>
				<title>View TimeTable</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
				<link rel="icon" href="/timetable.svg" />
			</Head>
			<Navbar />
			<Sidebar />
			<Container>
				<section className="ml-3 h-full">
					<span className="flex justify-between items-center mr-6 text-2xl font-medium text-primary-800 dark:text-primary-500">
						<div className="flex items-center space-x-2">
							<CalendarDaysIcon className="m-8 h-8 mr-2" />
							View Attendance Report
						</div>
					</span>
					<div className="p-5">
						{user?.role === 'FACULTY' ? (
							<FacultyView />
						) : (
							<StudentView />
						)}
					</div>
				</section>
			</Container>
		</>
	);
}
